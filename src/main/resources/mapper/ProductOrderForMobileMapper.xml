<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pony.dao.ProductOrderForMobileDAO">

    <!--根据查询条件获取订单列表-->
    <select id="getProductOrderListByQueryBean" parameterType="com.pony.MobileInterface.entity.queryBean.ProductOrderQueryBean" resultType="com.pony.MobileInterface.entity.ProductOrder">
        SELECT <include refid="productOrderColumnList"/>

        FROM `product_order` as po

        <where>
            <if test="userId != null">
                and po.user_id = #{userId}
            </if>


            <if test="state != null">
                and po.state =#{state}
            </if>


        </where>

        order by po.create_time desc
        <include refid="page_sql"/>

    </select>
    <!--根据订单id获取订单信息-->
    <select id="getProductOrderByOrderId"  parameterType="java.lang.Integer" resultType="com.pony.MobileInterface.entity.ProductOrder">
        SELECT <include refid="productOrderColumnList"/>
        FROM `product_order` as po
        where po.id = #{productOrderId}
    </select>

    <!--添加订单-->
    <insert id="addProductOrder" parameterType="com.pony.MobileInterface.entity.ProductOrder" >
        <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into product_order
                    (
                     product_order_number,
                     user_id,
                     address_id,
                     cost,
                     product_quantity,
                     create_time,
                     child_order_reservation_type,
                     delivery_date,
                     time_code)
             VALUES (#{productOrderNumber},
                     #{userId},
                     #{addressId},
                     #{cost},
                     #{productQuantity},
                     now(),
                     #{childOrderReservationType},
                     DATE_FORMAT(#{deliveryDate},'%Y-%m-%d'),
                     #{timeCode})
    </insert>

    <!--删除订单-->
    <delete id="deleteProductOrderByProductOrderId" parameterType="java.lang.Integer">
        delete from product_order
        where id = #{productOrderId}
    </delete>

    <!--订单更改订单状态-->
    <update id="updateProductOrderState" parameterType="java.lang.Integer">
        update product_order
          set state = #{state}
        where id = #{productOrderId}
    </update>

    <!--获取过期订单列表-->
    <select id="getExpiredProductOrderList" resultType="int">
        select id
        from product_order
        where create_time &lt; SUBDATE(now(),interval 15 minute)
              and state = 0
    </select>

    <!--批量设置订单过期-->
    <update id="batchSetProductOrderExpired" parameterType="Integer[]">
        update product_order
        set state = 1
        where id in
                <foreach collection="array" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
    </update>

     <!--根据订单ID获取订单产品图片-->
    <select id="getProductOrderProductIconListByProductOrderId" resultType="java.lang.String" parameterType="java.lang.Integer">
        select product_icon_url
        from child_order_product_icon
        where child_order_id in (select co.id
                                   from child_order as co
                                  where product_order_id=#{productOrderId})
    </select>
    <!--resultMap and sql-->



    <sql id="productOrderColumnList">
        po.id as id,
        po.product_order_number as productOrderNumber,
        po.user_id as userId,
        po.address_id as addressId,
        po.cost as cost,
        po.product_quantity as productQuantity,
        po.create_time as createTime,
        po.child_order_reservation_type as childOrderReservationType
    </sql>




    <sql id = "page_sql">
        limit ${beginLine},${itemNumber}
    </sql>


</mapper>